version: '3.0'
services:

  web:
    build: .
    ports:
      - "8000:8000"
    command: sh -c "python manage.py start_listening & python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started

    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
    volumes:
      - code:/app/backend
      - task_data:/app/backend/tasks_data
    networks:
      - kafkanet
      - net

  kafka:
    image: "confluentinc/cp-kafka:6.2.1"
    hostname: "kafka"
    ports:
      - "9092:9092"
    env_file:
      - kafka.env
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - kafkanet

  zookeeper:
    image: "bitnami/zookeeper:3.4.14"
    hostname: "zookeeper"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafkanet

  bot:
    build:
      dockerfile: ./Dockerfile_bot
    ports:
      - "8001:8001"
    command: >
      sh -c "python bot/bot__.py"
    env_file:
      - bot/bot.env
    depends_on:
      - web
      - redis
      - kafka
    networks:
      - kafkanet

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - 6379:6379
    hostname: redis
    networks:
      - net

  worker:
    build: .
    hostname: worker
    entrypoint: celery
    command: >
      sh -c "celery -A celery_app.app worker --loglevel=info --concurrency=10 -n worker7@%h & celery -A celery_app.app worker --loglevel=info --concurrency=10 -n worker1@%h & celery -A celery_app.app worker --loglevel=info --concurrency=10 -n worker2@%h & celery -A celery_app.app worker --loglevel=info --concurrency=10 -n worker3@%h & celery -A celery_app.app worker --loglevel=info --concurrency=10 -n worker5@%h & tail -f /dev/null"
    networks:
      - net
    depends_on:
      - redis
      - db
    volumes:
      - code:/app/backend
      - task_data:/app/backend/tasks_data



  flower:
    build: .
    hostname: flower
    entrypoint: celery
    command: -A celery_app.app flower
    volumes:
      - code:/app/backend
      - task_data:/app/backend/tasks_data
    networks:
      - net
    depends_on:
      - redis
      - db
    ports:
      - 5555:5555


  db:
    container_name: postgres_drf
    image: postgres:15.1-alpine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5432:5432
    networks:
      - net
    hostname: postgres

volumes:
  code:
  bot:
  task_data:

networks:
  kafkanet:
    driver: bridge
  net:
    driver: bridge
